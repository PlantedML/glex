// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// explainTreeFastPDBitmask
Rcpp::NumericMatrix explainTreeFastPDBitmask(Rcpp::NumericMatrix& x, Rcpp::NumericMatrix& x_background, NumericMatrix& tree, Rcpp::List& to_explain_list, unsigned int max_interaction, bool is_weak_inequality);
RcppExport SEXP _glex_explainTreeFastPDBitmask(SEXP xSEXP, SEXP x_backgroundSEXP, SEXP treeSEXP, SEXP to_explain_listSEXP, SEXP max_interactionSEXP, SEXP is_weak_inequalitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type x_background(x_backgroundSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type to_explain_list(to_explain_listSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_interaction(max_interactionSEXP);
    Rcpp::traits::input_parameter< bool >::type is_weak_inequality(is_weak_inequalitySEXP);
    rcpp_result_gen = Rcpp::wrap(explainTreeFastPDBitmask(x, x_background, tree, to_explain_list, max_interaction, is_weak_inequality));
    return rcpp_result_gen;
END_RCPP
}
// find_term_matches
std::vector<int> find_term_matches(std::string main_term, std::vector<std::string> terms);
RcppExport SEXP _glex_find_term_matches(SEXP main_termSEXP, SEXP termsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type main_term(main_termSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    rcpp_result_gen = Rcpp::wrap(find_term_matches(main_term, terms));
    return rcpp_result_gen;
END_RCPP
}
// empProbFunction
double empProbFunction(Rcpp::NumericMatrix& x, Rcpp::IntegerVector& coords, Rcpp::NumericVector& lb, Rcpp::NumericVector& ub);
RcppExport SEXP _glex_empProbFunction(SEXP xSEXP, SEXP coordsSEXP, SEXP lbSEXP, SEXP ubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type ub(ubSEXP);
    rcpp_result_gen = Rcpp::wrap(empProbFunction(x, coords, lb, ub));
    return rcpp_result_gen;
END_RCPP
}
// recurseRcppEmpProbfunction
Rcpp::NumericMatrix recurseRcppEmpProbfunction(Rcpp::NumericMatrix& x, Rcpp::IntegerVector& feature, Rcpp::NumericVector& split, Rcpp::IntegerVector& yes, Rcpp::IntegerVector& no, Rcpp::NumericVector& quality, Rcpp::NumericMatrix& lb, Rcpp::NumericMatrix& ub, Rcpp::IntegerVector& cover, std::vector<std::vector<unsigned int>>& U, unsigned int node);
RcppExport SEXP _glex_recurseRcppEmpProbfunction(SEXP xSEXP, SEXP featureSEXP, SEXP splitSEXP, SEXP yesSEXP, SEXP noSEXP, SEXP qualitySEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP coverSEXP, SEXP USEXP, SEXP nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type split(splitSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type yes(yesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type no(noSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type quality(qualitySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type cover(coverSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<unsigned int>>& >::type U(USEXP);
    Rcpp::traits::input_parameter< unsigned int >::type node(nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(recurseRcppEmpProbfunction(x, feature, split, yes, no, quality, lb, ub, cover, U, node));
    return rcpp_result_gen;
END_RCPP
}
// get_all_subsets_cpp
Rcpp::List get_all_subsets_cpp(Rcpp::IntegerVector x, unsigned int maxSize);
RcppExport SEXP _glex_get_all_subsets_cpp(SEXP xSEXP, SEXP maxSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxSize(maxSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_all_subsets_cpp(x, maxSize));
    return rcpp_result_gen;
END_RCPP
}
// explainTreePathDependent
NumericMatrix explainTreePathDependent(NumericMatrix& x, const NumericMatrix& tree, List& to_explain_list, unsigned int max_interaction, bool is_weak_inequality);
RcppExport SEXP _glex_explainTreePathDependent(SEXP xSEXP, SEXP treeSEXP, SEXP to_explain_listSEXP, SEXP max_interactionSEXP, SEXP is_weak_inequalitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< List& >::type to_explain_list(to_explain_listSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_interaction(max_interactionSEXP);
    Rcpp::traits::input_parameter< bool >::type is_weak_inequality(is_weak_inequalitySEXP);
    rcpp_result_gen = Rcpp::wrap(explainTreePathDependent(x, tree, to_explain_list, max_interaction, is_weak_inequality));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_glex_explainTreeFastPDBitmask", (DL_FUNC) &_glex_explainTreeFastPDBitmask, 6},
    {"_glex_find_term_matches", (DL_FUNC) &_glex_find_term_matches, 2},
    {"_glex_empProbFunction", (DL_FUNC) &_glex_empProbFunction, 4},
    {"_glex_recurseRcppEmpProbfunction", (DL_FUNC) &_glex_recurseRcppEmpProbfunction, 11},
    {"_glex_get_all_subsets_cpp", (DL_FUNC) &_glex_get_all_subsets_cpp, 2},
    {"_glex_explainTreePathDependent", (DL_FUNC) &_glex_explainTreePathDependent, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_glex(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
