% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/glex_vi.R
\name{glex_vi}
\alias{glex_vi}
\title{Variable Importance for Main and Interaction Terms}
\usage{
glex_vi(object, threshold = 0, ...)
}
\arguments{
\item{object}{Object of class \code{glex}.}

\item{threshold}{(\code{numeric(1)}) Optional threshold to filter output to include only importance scores greater
than this value. Refers to percentage of average absolute \code{m} divided by average prediction (\code{intercept}).}

\item{...}{(Unused)}
}
\value{
A data.table with columns:
\itemize{
\item \code{degree} (\code{integer}): Degree of interaction of the \code{term}, with \code{1}  being main effects, \code{2} being 2-degree interactions etc.
\item \code{term} (\code{character}): Model term, e.g. main effect \code{x1} or interaction term \code{x1:x2}, \code{x1:x3:x5} etc.
\item \code{term_list} (\code{list}): Same as \code{term} but as a list-column to enable filtering by specific variables without
requiring to split by \code{:}.
\item \code{m} (\code{numeric}): Average absolute contribution of \code{term}, see Details.
\item \code{m_rel} (\code{numeric}): \code{m} but relative to the average prediction (\code{intercept} in \code{glex()} output), times 100.
}
}
\description{
Variable Importance for Main and Interaction Terms
}
\details{
The \code{m} reported here is the average absolute value of \code{m} as reported by \code{glex()}, aggregated by \code{term}:

\deqn{\mathtt{m} = \frac{1}{n} \sum_{i = 1}^n |m| }

In turn, \code{m_rel} rescales \code{m} by the average prediction of the model (\eqn{m_0}, \code{intercept} as reported by \code{glex()}):

\deqn{\mathtt{m\_rel} = \frac{\mathtt{m}}{m_0} \cdot 100}
}
\examples{
# Random Planted Forest -----
if (requireNamespace("randomPlantedForest", quietly = TRUE)) {
library(randomPlantedForest)

rp <- rpf(mpg ~ ., data = mtcars[1:26, ], max_interaction = 4)

glex_rpf <- glex(rp, mtcars[27:32, ])

# All terms
vi_rpf <- glex_vi(glex_rpf)

# Only terms with a relative contribution greater or equal 0.1\% of the average prediction
vi_rpf_filtered <- glex_vi(glex_rpf, threshold = 0.1)

library(ggplot2)
autoplot(vi_rpf_filtered)
autoplot(vi_rpf, by_degree = TRUE)
}

# xgboost -----
if (requireNamespace("xgboost", quietly = TRUE)) {
library(xgboost)
x <- as.matrix(mtcars[, -1])
y <- mtcars$mpg
xg <- xgboost(data = x[1:26, ], label = y[1:26],
              params = list(max_depth = 4, eta = .1),
              nrounds = 10, verbose = 0)
glex_xgb <- glex(xg, x[27:32, ])
vi_xgb <- glex_vi(glex_xgb)

library(ggplot2)
autoplot(vi_xgb)
autoplot(vi_xgb, by_degree = TRUE)
}
}
