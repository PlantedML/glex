% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/glex.R
\name{glex}
\alias{glex}
\alias{glex.rpf}
\alias{glex.xgb.Booster}
\title{Global explanations for tree-based models.}
\usage{
glex(object, x, ...)

\method{glex}{rpf}(object, x, max_interaction = NULL, ...)

\method{glex}{xgb.Booster}(object, x, max_interaction = NULL, ...)
}
\arguments{
\item{object}{Model to be explained.}

\item{x}{Data to be explained.}

\item{...}{Further arguments passed to methods.}

\item{max_interaction}{(\code{integer(1)}) Maximum interaction size to consider.
Defaults to using all possible interactions.}
}
\value{
Decomposition of the regression or classification function.
A \code{list} with elements:
\itemize{
\item \code{shap}: SHAP values (\code{xgboost} method only).
\item \code{m}: Functional decomposition, i.e., all main and interaction
components in the model, up to the degree specified by \code{max_interaction}.
\item \code{intercept}: Intercept, i.e., expected value of the prediction.
}
}
\description{
Global explanations for tree-based models by decomposing
regression or classification functions into the sum of main components and
interaction components of arbitrary order. Calculates SHAP values and
q-interaction SHAP for all values of q for tree-based models such as xgboost.
}
\details{
For parallel execution, register a backend, e.g. with
\code{doParallel::registerDoParallel()}.
}
\examples{

# Random Planted Forest -----
if (requireNamespace("randomPlantedForest", quietly = TRUE)) {
library(randomPlantedForest)

rp <- rpf(mpg ~ ., data = mtcars[1:26, ], max_interaction = 2)

glex_rpf <- glex(rp, mtcars[27:32, ])
str(glex_rpf, list.len = 5)
}
# xgboost -----
if (requireNamespace("xgboost", quietly = TRUE)) {
library(xgboost)
x <- as.matrix(mtcars[, -1])
y <- mtcars$mpg
xg <- xgboost(data = x[1:26, ], label = y[1:26],
              params = list(max_depth = 4, eta = .1),
              nrounds = 10, verbose = 0)
glex(xg, x[27:32, ])

\dontrun{
# Parallel execution
doParallel::registerDoParallel()
glex(xg, x[27:32, ])
}
}
}
