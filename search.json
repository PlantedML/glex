[{"path":"http://plantedml.com/glex/articles/Bikesharing-Decomposition-rpf.html","id":"preparing-the-data","dir":"Articles","previous_headings":"","what":"Preparing the Data","title":"Bikesharing: Decomposition with Random Planted Forest","text":"First load Bikeshare data ISLR2 package, provides dataset published UCI Machine Learning Repository. data set contains hourly daily count rental bikes years 2011 2012 Capital bikeshare system, along weather seasonal information. outcome going bikers, total number bikers system. predictors interest case going following: hr: Hour day, 0 23 hours. temp: Normalized temperature Celsius workingday: Binary value indicating whether ’s work day (1) (0) recode hr variable 24-level factor numeric column.","code":"data(Bikeshare) bike <- data.table(Bikeshare) bike[, hr := as.numeric(as.character(hr))] bike[, workingday := factor(workingday, levels = c(0, 1), labels = c(\"No Workingday\", \"Workingday\"))] bike[, season := factor(season, levels = 1:4, labels = c(\"Winter\", \"Spring\", \"Summer\", \"Fall\"))]  # Only one observation with this condition, removing it to make space. bike <- bike[weathersit != \"heavy rain/snow\", ]   head(bike) #>    season mnth day hr holiday weekday    workingday   weathersit temp  atemp #> 1: Winter  Jan   1  0       0       6 No Workingday        clear 0.24 0.2879 #> 2: Winter  Jan   1  1       0       6 No Workingday        clear 0.22 0.2727 #> 3: Winter  Jan   1  2       0       6 No Workingday        clear 0.22 0.2727 #> 4: Winter  Jan   1  3       0       6 No Workingday        clear 0.24 0.2879 #> 5: Winter  Jan   1  4       0       6 No Workingday        clear 0.24 0.2879 #> 6: Winter  Jan   1  5       0       6 No Workingday cloudy/misty 0.24 0.2576 #>     hum windspeed casual registered bikers #> 1: 0.81    0.0000      3         13     16 #> 2: 0.80    0.0000      8         32     40 #> 3: 0.80    0.0000      5         27     32 #> 4: 0.75    0.0000      3         10     13 #> 5: 0.75    0.0000      0          1      1 #> 6: 0.75    0.0896      0          1      1"},{"path":"http://plantedml.com/glex/articles/Bikesharing-Decomposition-rpf.html","id":"fitting-purification-component-extraction","dir":"Articles","previous_headings":"","what":"Fitting, Purification, Component Extraction","title":"Bikesharing: Decomposition with Random Planted Forest","text":"Next can fit Random Planted Forest bikers variable, using subset available predictors. limit model’s complexity setting max_interaction = 3, going visualize interactions third degree, using higher value might marginally improve predictive performance cost longer runtime. example , smaller model merely 30 trees suffices. also purify forest enable desired decomposition. step required global predictions may take time, implemented separate step. select predictors interest use glex() retrieve predictive components include , main effects 3rd degree interactions. resulting object also contains original data x, need later visualization. Please note fitting model, purification, extraction components may take time, depending available resources size data. example, steps took around 40 seconds complete GitHub Actions.","code":"rp <- rpf(   bikers ~ day + hr + temp + windspeed + workingday + hum + weathersit + season,   data = bike,   max_interaction = 3, ntrees = 30 )  purify(rp) #> -- Regression Random Planted Forest -- #>  #> Formula: bikers ~ day + hr + temp + windspeed + workingday + hum + weathersit +      season  #> Fit using 8 predictors and 3-degree interactions. #> Forest is purified! #>  #> Called with parameters: #>  #>             loss: L2 #>           ntrees: 30 #>  max_interaction: 3 #>           splits: 30 #>        split_try: 10 #>            t_try: 0.4 #>            delta: 0 #>          epsilon: 0.1 #>    deterministic: FALSE #>         nthreads: 1 #>           purify: FALSE #>               cv: FALSE vars <- c(\"hr\", \"temp\", \"workingday\", \"hum\", \"weathersit\", \"season\")  components <- glex(rp, bike, predictors = vars)  # There's a lot of components... str(components$m, list.len = 8) #> Classes 'data.table' and 'data.frame':   8644 obs. of  92 variables: #>  $ day                            : num  -37 -37 -37 -37 -37 ... #>  $ hr                             : num  -120 -120 -121 -121 -121 ... #>  $ temp                           : num  -35.3 -35.3 -35.3 -35.3 -35.3 ... #>  $ windspeed                      : num  0.00277 0.00277 0.00277 0.00277 0.00277 ... #>  $ workingday                     : num  1.37 1.37 1.37 1.37 1.37 ... #>  $ hum                            : num  -11.42 -10.35 -10.35 -1.44 -1.44 ... #>  $ weathersit                     : num  4.09 4.09 4.09 4.09 4.09 ... #>  $ season                         : num  -25.2 -25.2 -25.2 -25.2 -25.2 ... #>   [list output truncated] #>  - attr(*, \".internal.selfref\")=<externalptr>"},{"path":"http://plantedml.com/glex/articles/Bikesharing-Decomposition-rpf.html","id":"main-effects","dir":"Articles","previous_headings":"","what":"Main Effects","title":"Bikesharing: Decomposition with Random Planted Forest","text":"","code":"p_main <- plot_main_effect(components, \"temp\") +   plot_main_effect(components, \"hr\") +   plot_main_effect(components, \"workingday\")  p_main + plot_layout(widths = c(.3, .3, .4))"},{"path":"http://plantedml.com/glex/articles/Bikesharing-Decomposition-rpf.html","id":"way-interactions","dir":"Articles","previous_headings":"","what":"2-Way Interactions","title":"Bikesharing: Decomposition with Random Planted Forest","text":"","code":"p_2way1 <- plot_twoway_effects(components, c(\"workingday\", \"temp\")) p_2way2 <- plot_twoway_effects(components, c(\"hr\", \"workingday\")) p_2way3 <- plot_twoway_effects(components, c(\"hr\", \"temp\"))  p_2way <- (p_2way1 / p_2way2 +      plot_layout(guides = \"collect\") &       theme(legend.position = \"bottom\")) | p_2way3  p_2way <- p_2way +    plot_annotation(tag_levels = list(c(\"1,2\", \"3,1\", \"3,3\")), tag_prefix = \"m(\", tag_suffix = \")\")  p_2way"},{"path":"http://plantedml.com/glex/articles/Bikesharing-Decomposition-rpf.html","id":"way-interaction","dir":"Articles","previous_headings":"","what":"3-Way Interaction","title":"Bikesharing: Decomposition with Random Planted Forest","text":"","code":"p_3way <- plot_threeway_effects(components, c(\"hr\", \"temp\", \"workingday\"))  p_3way"},{"path":"http://plantedml.com/glex/articles/Bikesharing-Decomposition-rpf.html","id":"everything-together","dir":"Articles","previous_headings":"","what":"Everything Together","title":"Bikesharing: Decomposition with Random Planted Forest","text":"","code":"p_main / p_2way / p_3way +    plot_layout(heights = c(.2, .5, .3))"},{"path":"http://plantedml.com/glex/articles/Bikesharing-Decomposition-rpf.html","id":"additional-effects","dir":"Articles","previous_headings":"","what":"Additional effects","title":"Bikesharing: Decomposition with Random Planted Forest","text":"main effects: Iterating vars (hr, temp, workingday, hum, weathersit, season), passing plot_main_effect, collecting plots patchwork::wrap_plots():  use autoplot convenience. Internally just passes arguments specialized plot_* functions, depending number predictors supplied.      3rd degree interactions can tricky, effect .","code":"wrap_plots(lapply(vars, plot_main_effect, object = components)) autoplot(components, c(\"season\", \"workingday\")) autoplot(components, c(\"season\", \"hr\")) autoplot(components, c(\"season\", \"weathersit\")) autoplot(components, c(\"weathersit\", \"temp\")) autoplot(components, c(\"hum\", \"temp\")) autoplot(components, c(\"season\", \"hr\", \"weathersit\")) autoplot(components, c(\"workingday\", \"hr\", \"season\")) # Hard to interpret, likely spurious autoplot(components, c(\"workingday\", \"hr\", \"weathersit\")) # zero effect autoplot(components, c(\"weathersit\", \"season\", \"workingday\"))"},{"path":"http://plantedml.com/glex/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marvin N. Wright. Author, maintainer. Joseph Theo Meyer. Author. Munir Hiabu. Author. Lukas Burk. Author.","code":""},{"path":"http://plantedml.com/glex/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wright MN, Meyer JT, Hiabu M, Burk L (2023). glex: Global Explanations Tree-Based Models. R package version 0.3.0.9000, http://plantedml.com/glex/, https://github.com/PlantedML/glex.","code":"@Manual{,   title = {glex: Global Explanations for Tree-Based Models},   author = {Marvin N. Wright and Joseph Theo Meyer and Munir Hiabu and Lukas Burk},   year = {2023},   note = {R package version 0.3.0.9000, http://plantedml.com/glex/},   url = {https://github.com/PlantedML/glex}, }"},{"path":"http://plantedml.com/glex/index.html","id":"global-explanations-for-tree-based-models","dir":"","previous_headings":"","what":"Global Explanations for Tree-Based Models","title":"Global Explanations for Tree-Based Models","text":"Global explanations tree-based models decomposing regression classification functions sum main components interaction components arbitrary order. Calculates exact interventional SHAP values q-interaction interventional SHAP (q highest order interaction present model) tree-based models XGBoost. See accompanying paper details exact definitions: “Unifying local global model explanations functional decomposition low dimensional structures” (arxiv).","code":""},{"path":"http://plantedml.com/glex/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Global Explanations for Tree-Based Models","text":"can install development version glex GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"PlantedML/glex\")"},{"path":"http://plantedml.com/glex/index.html","id":"whats-included","dir":"","previous_headings":"","what":"What’s Included","title":"Global Explanations for Tree-Based Models","text":"Currently glex works xgboost randomPlantedForest models, ’ll start fitting model one : Note xgboost, unlike randomPlantedForest, requires matrix input support categorical predictors. Using model objects dataset explain (test set case), can create glex objects model fits. objects class glex list containing prediction components main interaction terms ($m), dataset explained observed feature values ($x) used visualize feature effects, average predicted value model ($intercept). xgboost method additionally returns SHAP values ($shap) feature model. m shap satisfy property sums (per observation) together intercept equal model prediction observation:","code":"# Install xgboost from CRAN install.packages(\"xgboost\") # ... and randomPlantedForest from GitHub remotes::install_github(\"PlantedML/randomPlantedForest\") library(glex)  # Model fitting library(randomPlantedForest) library(xgboost)  # Visualization library(ggplot2) library(patchwork) theme_set(theme_minimal(base_size = 13))  set.seed(21) rp <- rpf(mpg ~ ., data = mtcars[1:26, ], max_interaction = 3)  x <- as.matrix(mtcars[, -1]) y <- mtcars$mpg xg <- xgboost(data = x[1:26, ], label = y[1:26],               params = list(max_depth = 3, eta = .1),               nrounds = 30, verbose = 0) glex_rpf <- glex(rp, mtcars[27:32, ]) glex_xgb <- glex(xg, x[27:32, ]) # Calculating sum of components and sum of SHAP values sum_m_rpf <- rowSums(glex_rpf$m) + glex_rpf$intercept sum_m_xgb <- rowSums(glex_xgb$m) + glex_xgb$intercept sum_shap_xgb <- rowSums(glex_xgb$shap) + glex_xgb$intercept  # Model predictions pred_rpf <- predict(rp, mtcars[27:32, ])[[1]] pred_xgb <- predict(xg, x[27:32, ])  # For XGBoost cbind(pred_xgb, sum_m_xgb, sum_shap_xgb) #>      pred_xgb sum_m_xgb sum_shap_xgb #> [1,] 21.39075  21.39076     21.39076 #> [2,] 20.23664  20.23664     20.23664 #> [3,] 14.73895  14.73895     14.73895 #> [4,] 18.76170  18.76170     18.76170 #> [5,] 13.05614  13.05614     13.05614 #> [6,] 20.23664  20.23664     20.23664  # For RPF cbind(pred_rpf, sum_m_rpf) #>      pred_rpf sum_m_rpf #> [1,] 29.69958  29.69958 #> [2,] 25.24842  25.24842 #> [3,] 19.35783  19.35783 #> [4,] 20.75434  20.75434 #> [5,] 15.95185  15.95185 #> [6,] 24.86277  24.86277"},{"path":"http://plantedml.com/glex/index.html","id":"variable-importances","dir":"","previous_headings":"What’s Included","what":"Variable Importances","title":"Global Explanations for Tree-Based Models","text":"Variable importance scores calculated main interaction term calculating average absolute prediction components (m) dataset supplied glex(). output additionally contains degree interaction, can used filtering aggregating. filter terms contributions threshold 0.05 get compact plot, terms threshold aggregated one labelled “Remaining terms”: can also sum values within degree interaction aggregated view, can useful allows us judge interactions certain degree particularly relevant given model.","code":"vi_rpf <- glex_vi(glex_rpf) vi_xgb <- glex_vi(glex_xgb)  vi_rpf[1:5, c(\"degree\", \"term\", \"m\")] #>    degree   term         m #>     <int> <char>     <num> #> 1:      1     wt 1.4747963 #> 2:      1     hp 1.3103943 #> 3:      1   drat 1.0086698 #> 4:      1     am 0.7842427 #> 5:      1   disp 0.7641779 vi_xgb[1:5, c(\"degree\", \"term\", \"m\")] #>    degree   term         m #>     <int> <char>     <num> #> 1:      1     hp 1.1360711 #> 2:      1     wt 1.0361386 #> 3:      1   disp 0.6661451 #> 4:      1    cyl 0.5727933 #> 5:      1   qsec 0.2129094 p_vi1 <- autoplot(vi_rpf, threshold = .05) +    labs(title = NULL, tag = \"RPF\")  p_vi2 <- autoplot(vi_xgb, threshold = .05) +    labs(title = NULL, tag = \"XGBoost\")  p_vi1 + p_vi2 +   plot_annotation(title = \"Variable importance scores by term\") &    theme(plot.tag.position = \"top\") p_vi1 <- autoplot(vi_rpf, by_degree = TRUE) +    labs(title = NULL, tag = \"RPF\")  p_vi2 <- autoplot(vi_xgb, by_degree = TRUE) +    labs(title = NULL, tag = \"XGBoost\")  p_vi1 + p_vi2 +   plot_annotation(title = \"Variable importance scores by degree\") &    theme(plot.tag.position = \"top\")"},{"path":"http://plantedml.com/glex/index.html","id":"feature-effects","dir":"","previous_headings":"What’s Included","what":"Feature Effects","title":"Global Explanations for Tree-Based Models","text":"can also plot prediction components observed feature values, admittedly produces interesting output larger, interesting datasets.   Currently support plots interactions third degree, including continuous categorical features. Unfortunately, three-way interactions continuous features supported yet.","code":"p1 <- autoplot(glex_rpf, \"hp\") + labs(subtitle = \"RPF\") p2 <- autoplot(glex_xgb, \"hp\") + labs(subtitle = \"XGBoost\")  p1 + p2 +    plot_annotation(title = \"Main effect for 'hp'\") &    theme(plot.tag.position = \"top\") p1 <- autoplot(glex_rpf, c(\"hp\", \"wt\")) + labs(subtitle = \"RPF\") p2 <- autoplot(glex_xgb, c(\"hp\", \"wt\")) + labs(subtitle = \"XGBoost\")  p1 + p2 +    plot_annotation(title = \"Two-way effects for 'hp' and 'wt'\") &    theme(plot.tag.position = \"top\")"},{"path":"http://plantedml.com/glex/index.html","id":"decomposition-of-individual-predictions","dir":"","previous_headings":"What’s Included","what":"Decomposition of Individual Predictions","title":"Global Explanations for Tree-Based Models","text":"Finally, can explore prediction single observation displaying individual prediction components. SHAP value sum components serves reference value. compactness, plot one feature collapse interaction terms second degree one combined effect small.","code":"p1 <- glex_explain(glex_rpf, id = 2, predictors = \"hp\", max_interaction = 2) +    labs(tag = \"RPF\") p2 <- glex_explain(glex_xgb, id = 2, predictors = \"hp\", max_interaction = 2) +    labs(tag = \"XGBoost\")  p1 + p2 & theme(plot.tag.position = \"bottom\") &    theme(plot.tag.position = \"bottom\")"},{"path":"http://plantedml.com/glex/reference/autoplot.glex_vi.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot glex Variable Importances — autoplot.glex_vi","title":"Plot glex Variable Importances — autoplot.glex_vi","text":"Plot glex Variable Importances","code":""},{"path":"http://plantedml.com/glex/reference/autoplot.glex_vi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot glex Variable Importances — autoplot.glex_vi","text":"","code":"# S3 method for glex_vi autoplot(   object,   by_degree = FALSE,   threshold = 0,   max_interaction = NULL,   scale = \"absolute\",   ... )"},{"path":"http://plantedml.com/glex/reference/autoplot.glex_vi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot glex Variable Importances — autoplot.glex_vi","text":"object Object class glex_vi, see glex_vi(). by_degree (logical(1): FALSE) Optionally sum values degree interaction, resulting one contribution score main effects, second-order interactions, etc. threshold (numeric(1): 0) Optional threshold filter output include importance scores greater value. Refers chosen scale. max_interaction (integer(1): NULL) Optionally filter plot show terms specified degree interaction. Similar threshold, terms aggregated \"Remaining terms\" label. scale (\"absolute\") Plot average absolute contributions (default) value scaled average prediction (\"relative\"). ... (Unused)","code":""},{"path":"http://plantedml.com/glex/reference/autoplot.glex_vi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot glex Variable Importances — autoplot.glex_vi","text":"ggplot object.","code":""},{"path":[]},{"path":"http://plantedml.com/glex/reference/glex-package.html","id":null,"dir":"Reference","previous_headings":"","what":"glex: Global Explanations for Tree-Based Models — glex-package","title":"glex: Global Explanations for Tree-Based Models — glex-package","text":"Global explanations tree-based models decomposing regression classification functions sum main components interaction components arbitrary order. Calculates SHAP values q-interaction SHAP values q tree-based models xgboost.","code":""},{"path":[]},{"path":"http://plantedml.com/glex/reference/glex-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"glex: Global Explanations for Tree-Based Models — glex-package","text":"Maintainer: Marvin N. Wright cran@wrig.de (ORCID) Authors: Joseph Theo Meyer Munir Hiabu Lukas Burk burk@leibniz-bips.de (ORCID)","code":""},{"path":"http://plantedml.com/glex/reference/glex.html","id":null,"dir":"Reference","previous_headings":"","what":"Global explanations for tree-based models. — glex","title":"Global explanations for tree-based models. — glex","text":"Global explanations tree-based models decomposing regression classification functions sum main components interaction components arbitrary order. Calculates SHAP values q-interaction SHAP values q tree-based models xgboost.","code":""},{"path":"http://plantedml.com/glex/reference/glex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global explanations for tree-based models. — glex","text":"","code":"glex(object, x, ...)  # S3 method for rpf glex(object, x, max_interaction = NULL, ...)  # S3 method for xgb.Booster glex(object, x, max_interaction = NULL, ...)"},{"path":"http://plantedml.com/glex/reference/glex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global explanations for tree-based models. — glex","text":"object Model explained, either class xgb.Booster rpf. x Data explained. ... arguments passed methods. max_interaction (integer(1): NULL) Maximum interaction size consider. Defaults using possible interactions available model. xgboost, defaults max_depth parameter model fit. set xgboost, default value 6 assumed.","code":""},{"path":"http://plantedml.com/glex/reference/glex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global explanations for tree-based models. — glex","text":"Decomposition regression classification function. list elements: shap: SHAP values (xgboost method ). m: Functional decomposition, .e., main interaction components model, degree specified max_interaction. intercept: Intercept, .e., expected value prediction.","code":""},{"path":"http://plantedml.com/glex/reference/glex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Global explanations for tree-based models. — glex","text":"parallel execution using xgboost models, register backend, e.g. doParallel::registerDoParallel().","code":""},{"path":"http://plantedml.com/glex/reference/glex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global explanations for tree-based models. — glex","text":"","code":"# Random Planted Forest ----- if (requireNamespace(\"randomPlantedForest\", quietly = TRUE)) { library(randomPlantedForest)  rp <- rpf(mpg ~ ., data = mtcars[1:26, ], max_interaction = 2)  glex_rpf <- glex(rp, mtcars[27:32, ]) str(glex_rpf, list.len = 5) } #> List of 3 #>  $ m        :Classes ‘data.table’ and 'data.frame':\t6 obs. of  55 variables: #>   ..$ cyl      : num [1:6] 0.749 0.749 -0.38 -0.249 -0.38 ... #>   ..$ disp     : num [1:6] 0.831 2.858 -1.419 0.488 -0.922 ... #>   ..$ hp       : num [1:6] 2.422 0.358 -1.901 -0.229 -1.901 ... #>   ..$ drat     : num [1:6] 1.26174 0.00991 1.26174 0.02304 0.02304 ... #>   ..$ wt       : num [1:6] 2.5 2.409 0.478 0.401 -0.94 ... #>   .. [list output truncated] #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ intercept: num 20.1 #>  $ x        :Classes ‘data.table’ and 'data.frame':\t6 obs. of  10 variables: #>   ..$ cyl : num [1:6] 4 4 8 6 8 4 #>   ..$ disp: num [1:6] 120.3 95.1 351 145 301 ... #>   ..$ hp  : num [1:6] 91 113 264 175 335 109 #>   ..$ drat: num [1:6] 4.43 3.77 4.22 3.62 3.54 4.11 #>   ..$ wt  : num [1:6] 2.14 1.51 3.17 2.77 3.57 ... #>   .. [list output truncated] #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"class\")= chr [1:3] \"glex\" \"rpf_components\" \"list\" # xgboost ----- if (requireNamespace(\"xgboost\", quietly = TRUE)) { library(xgboost) x <- as.matrix(mtcars[, -1]) y <- mtcars$mpg xg <- xgboost(data = x[1:26, ], label = y[1:26],               params = list(max_depth = 4, eta = .1),               nrounds = 10, verbose = 0) glex(xg, x[27:32, ])  if (FALSE) { # Parallel execution doParallel::registerDoParallel() glex(xg, x[27:32, ]) } }"},{"path":"http://plantedml.com/glex/reference/glex_explain.html","id":null,"dir":"Reference","previous_headings":"","what":"Explain a single prediction — glex_explain","title":"Explain a single prediction — glex_explain","text":"Plots prediction components single observation, identified row number dataset used glex(). Since resulting plot can quite busy due potentially large amounts elements, highly recommended use predictors, max_interaction, threshold restrict number elements plot.","code":""},{"path":"http://plantedml.com/glex/reference/glex_explain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explain a single prediction — glex_explain","text":"","code":"glex_explain(   object,   id,   threshold = 0,   max_interaction = NULL,   predictors = NULL,   class = NULL,   barheight = 0.5 )"},{"path":"http://plantedml.com/glex/reference/glex_explain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explain a single prediction — glex_explain","text":"object Object class glex containing prediction components data explained. id (integer(1)) Row ID observation explained object$x. threshold (numeric(1): 0) Threshold filter output case many negligible effects. max_interaction (integer(1): NULL) Optionally filter plot show terms specified degree interaction. Similar threshold, terms aggregated \"Remaining terms\" label. predictors (character: NULL) Vector column names $x restrict plot . class (character: NULL) multiclass targets, specifies target class limit output. barheight (numeric(1): 0.5) Relative height horizontal bars. Preferred value may depend number vertical elements, hence may necessary adjust value needed.","code":""},{"path":"http://plantedml.com/glex/reference/glex_explain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explain a single prediction — glex_explain","text":"ggplot object.","code":""},{"path":[]},{"path":"http://plantedml.com/glex/reference/glex_explain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explain a single prediction — glex_explain","text":"","code":"set.seed(1) # Random Planted Forest ----- if (requireNamespace(\"randomPlantedForest\", quietly = TRUE)) { library(randomPlantedForest)  rp <- rpf(mpg ~ ., data = mtcars[1:26, ], max_interaction = 2)  glex_rpf <- glex(rp, mtcars[27:32, ])  glex_explain(glex_rpf, id = 3, predictors = \"hp\", threshold = 0.01) }"},{"path":"http://plantedml.com/glex/reference/glex_vi.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable Importance for Main and Interaction Terms — glex_vi","title":"Variable Importance for Main and Interaction Terms — glex_vi","text":"Variable Importance Main Interaction Terms","code":""},{"path":"http://plantedml.com/glex/reference/glex_vi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable Importance for Main and Interaction Terms — glex_vi","text":"","code":"glex_vi(object, ...)"},{"path":"http://plantedml.com/glex/reference/glex_vi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable Importance for Main and Interaction Terms — glex_vi","text":"object Object class glex. ... (Unused)","code":""},{"path":"http://plantedml.com/glex/reference/glex_vi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable Importance for Main and Interaction Terms — glex_vi","text":"data.table columns: degree (integer): Degree interaction term, 1 main effects, 2 2-degree interactions etc. term (character): Model term, e.g. main effect x1 interaction term x1:x2, x1:x3:x5 etc. class (factor): multiclass targets : associated target class. Lists classes target, limited majority vote. m (numeric): Average absolute contribution term, see Details. m_rel (numeric): m relative average prediction (intercept glex() output).","code":""},{"path":"http://plantedml.com/glex/reference/glex_vi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variable Importance for Main and Interaction Terms — glex_vi","text":"m reported average absolute value m reported glex(), aggregated term: $$\\mathtt{m} = \\frac{1}{n} \\sum_{= 1}^n |m| $$ turn, m_rel rescales m average prediction model (\\(m_0\\), intercept reported glex()): $$\\mathtt{m\\_rel} = \\frac{\\mathtt{m}}{m_0}$$","code":""},{"path":[]},{"path":"http://plantedml.com/glex/reference/glex_vi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable Importance for Main and Interaction Terms — glex_vi","text":"","code":"set.seed(1) # Random Planted Forest ----- if (requireNamespace(\"randomPlantedForest\", quietly = TRUE)) { library(randomPlantedForest)  rp <- rpf(mpg ~ ., data = mtcars[1:26, ], max_interaction = 3)  glex_rpf <- glex(rp, mtcars[27:32, ])  # All terms vi_rpf <- glex_vi(glex_rpf)  library(ggplot2) # Filter to contributions greater 0.05 on the scale of the target autoplot(vi_rpf, threshold = 0.05) # Summarize by degree of interaction autoplot(vi_rpf, by_degree = TRUE) # Filter by relative contributions greater 0.1% autoplot(vi_rpf, scale = \"relative\", threshold = 0.001) }   # xgboost ----- if (requireNamespace(\"xgboost\", quietly = TRUE)) { library(xgboost) x <- as.matrix(mtcars[, -1]) y <- mtcars$mpg xg <- xgboost(data = x[1:26, ], label = y[1:26],               params = list(max_depth = 4, eta = .1),               nrounds = 10, verbose = 0) glex_xgb <- glex(xg, x[27:32, ]) vi_xgb <- glex_vi(glex_xgb)  library(ggplot2) autoplot(vi_xgb) autoplot(vi_xgb, by_degree = TRUE) }"},{"path":"http://plantedml.com/glex/reference/plot_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Prediction Components — autoplot.glex","title":"Plot Prediction Components — autoplot.glex","text":"Plotting main effects among prediction components effectively identical partial dependence plot, centered 0.","code":""},{"path":"http://plantedml.com/glex/reference/plot_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Prediction Components — autoplot.glex","text":"","code":"# S3 method for glex autoplot(object, predictors, ...)  plot_main_effect(object, predictor, ...)  plot_threeway_effects(object, predictors, ...)  plot_twoway_effects(object, predictors, ...)"},{"path":"http://plantedml.com/glex/reference/plot_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Prediction Components — autoplot.glex","text":"object Object class glex. ... Unused predictor, predictors (character) vector predictor names, e.g. \"x1\" plot main effect x1, c(\"x1\", \"x2\") plot interaction term x1:x2.","code":""},{"path":"http://plantedml.com/glex/reference/plot_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Prediction Components — autoplot.glex","text":"ggplot2 object.","code":""},{"path":[]},{"path":"http://plantedml.com/glex/reference/plot_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Prediction Components — autoplot.glex","text":"","code":"if (requireNamespace(\"randomPlantedForest\", quietly = TRUE)) { library(randomPlantedForest)  # introduce factor variables to show categorical feature handling mtcars$cyl <- factor(mtcars$cyl) mtcars$vs <- factor(mtcars$vs)  # Fit forest, get components set.seed(12) rpfit <- rpf(mpg ~ cyl + wt + hp + drat + vs, data = mtcars, ntrees = 25, max_interaction = 3) components <- glex(rpfit, mtcars)  # Main effects ---- plot_main_effect(components, \"wt\") plot_main_effect(components, \"cyl\") }  # plot_threeway_effects(components, c(\"hr\", \"temp\", \"workingday\")) if (requireNamespace(\"randomPlantedForest\", quietly = TRUE)) { library(randomPlantedForest)  # 2-degree interaction effects ---- # 2d continuous, scatterplot of arbitrary orientation plot_twoway_effects(components, c(\"wt\", \"drat\")) # flipped: plot_twoway_effects(components, c(\"drat\", \"wt\"))  # continuous + categorical (forces continuous on x axis, colors by categorical) plot_twoway_effects(components, c(\"wt\", \"cyl\")) # identical: plot_twoway_effects(components, c(\"cyl\", \"wt\"))  # 2d categorical, heatmap of arbitrary orientation plot_twoway_effects(components, c(\"vs\", \"cyl\")) plot_twoway_effects(components, c(\"cyl\", \"vs\")) }"},{"path":"http://plantedml.com/glex/reference/plot_pdp.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial Dependence Plot — plot_pdp","title":"Partial Dependence Plot — plot_pdp","text":"version plot_main_effect intercept term (horizontal line) added, resulting partial dependence plot.","code":""},{"path":"http://plantedml.com/glex/reference/plot_pdp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial Dependence Plot — plot_pdp","text":"","code":"plot_pdp(object, predictor, ...)"},{"path":"http://plantedml.com/glex/reference/plot_pdp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial Dependence Plot — plot_pdp","text":"object Object class glex. predictor (character(1)) predictor names, e.g. \"x1\". ... Used future expansion.","code":""},{"path":"http://plantedml.com/glex/reference/plot_pdp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial Dependence Plot — plot_pdp","text":"ggplot2 object.","code":""},{"path":[]},{"path":"http://plantedml.com/glex/reference/plot_pdp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial Dependence Plot — plot_pdp","text":"","code":"if (requireNamespace(\"randomPlantedForest\", quietly = TRUE)) { library(randomPlantedForest)  # introduce factor variables to show categorical feature handling mtcars$cyl <- factor(mtcars$cyl) mtcars$vs <- factor(mtcars$vs)  # Fit forest, get components set.seed(12) rpfit <- rpf(mpg ~ cyl + wt + hp + drat + vs, data = mtcars, ntrees = 25, max_interaction = 3) components <- glex(rpfit, mtcars)  plot_pdp(components, \"wt\") plot_pdp(components, \"cyl\") }"},{"path":"http://plantedml.com/glex/reference/print.glex.html","id":null,"dir":"Reference","previous_headings":"","what":"Print glex objects — print.glex","title":"Print glex objects — print.glex","text":"implemented mainly avoid flooding console cases glex object uses many terms, leads large amount column names $m printed console. function wraps str() truncated output compact representation.","code":""},{"path":"http://plantedml.com/glex/reference/print.glex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print glex objects — print.glex","text":"","code":"# S3 method for glex print(x, ...)"},{"path":"http://plantedml.com/glex/reference/print.glex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print glex objects — print.glex","text":"x Object print. ... (Unused)","code":""},{"path":"http://plantedml.com/glex/reference/print.glex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print glex objects — print.glex","text":"","code":"# Random Planted Forest ----- if (requireNamespace(\"randomPlantedForest\", quietly = TRUE)) { library(randomPlantedForest) rp <- rpf(mpg ~ hp + wt + drat, data = mtcars[1:26, ], max_interaction = 2)  glex(rp, mtcars[27:32, ]) } #> glex object of subclass rpf_components  #> Explaining predictions of 6 observations with 6 terms: #>  #> List of 3 #>  $ m        :Classes ‘data.table’ and 'data.frame':\t6 obs. of  6 variables: #>   ..$ hp     : num [1:6] 4.902 0.102 -3.918 -1.244 -3.918 ... #>   ..$ wt     : num [1:6] 3.82 3.62 1.16 1.13 -1.7 ... #>   ..$ drat   : num [1:6] 2.38 -0.45 2.38 -0.286 -0.286 ... #>   ..$ hp:wt  : num [1:6] 0.386 -0.157 0.287 -0.309 -0.274 ... #>   ..$ drat:hp: num [1:6] 0.6252 0.0806 0.0829 0.174 0.2327 ... #>   .. [list output truncated] #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ intercept: num 20.1 #>  $ x        :Classes ‘data.table’ and 'data.frame':\t6 obs. of  3 variables: #>   ..$ hp  : num [1:6] 91 113 264 175 335 109 #>   ..$ wt  : num [1:6] 2.14 1.51 3.17 2.77 3.57 ... #>   ..$ drat: num [1:6] 4.43 3.77 4.22 3.62 3.54 4.11 #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"class\")= chr [1:3] \"glex\" \"rpf_components\" \"list\""},{"path":"http://plantedml.com/glex/news/index.html","id":"glex-0309000-development-version","dir":"Changelog","previous_headings":"","what":"glex 0.3.0.9000 (Development version)","title":"glex 0.3.0.9000 (Development version)","text":"Add plot_pdp(), version plot_main_effect() intercept added. Limit max_interaction glex.xgb.Booster max_depth parameter xgboost model. max_depth set model fit, default value 6 assumed. prevents glex returning spurious higher-order interactions containing values numerically close 0. Extend plot functions multiclass classification. cases means facetting target class. Overhaul glex_explain waterfall plot showing SHAP decomposition given predictors. autoplot.glex_vi gains max_interaction argument line glex_explain, now similarly aggregates terms either fall threshold exceed max_interaction. Add glex.print compact output case large numbers terms.","code":""},{"path":"http://plantedml.com/glex/news/index.html","id":"glex-030","dir":"Changelog","previous_headings":"","what":"glex 0.3.0","title":"glex 0.3.0","text":"Added plotting functions main, 2- 3-degree interaction terms Added ggplot2::autoplot S3 method glex objects. Added pkgdown site Added Bikesharing article Added glex_vi() compute variable importance scores including interaction terms, including corresponding ggplot2::autoplot method. Added glex_explain() plot prediction components single observation.","code":""},{"path":"http://plantedml.com/glex/news/index.html","id":"glex-020","dir":"Changelog","previous_headings":"","what":"glex 0.2.0","title":"glex 0.2.0","text":"Convert glex() S3 generic function methods xgboost randomPlantedForest models. Fix bug xgboost method lead wrongly computed shap values certain cases. Added NEWS.md file track changes package.","code":""}]
