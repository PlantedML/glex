[{"path":"http://plantedml.com/glex/articles/Bikesharing-Decomposition-rpf.html","id":"preparing-the-data","dir":"Articles","previous_headings":"","what":"Preparing the Data","title":"Bikesharing: Decomposition with Random Planted Forest","text":"First load Bikeshare data ISLR2 package, provides dataset published UCI Machine Learning Repository. data set contains hourly daily count rental bikes years 2011 2012 Capital bikeshare system, along weather seasonal information. outcome going bikers, total number bikers system. predictors interest case going following: hr: Hour day, 0 23 hours. temp: Normalized temperature Celsius workingday: Binary value indicating whether ’s work day (1) (0) recode hr variable 24-level factor numeric column.","code":"data(Bikeshare) bike <- data.table(Bikeshare) bike[, hr := as.numeric(as.character(hr))] bike[, workingday := factor(workingday, levels = c(0, 1), labels = c(\"No Workingday\", \"Workingday\"))] bike[, season := factor(season, levels = 1:4, labels = c(\"Winter\", \"Spring\", \"Summer\", \"Fall\"))]  # Only one observation with this condition, removing it to make space. bike <- bike[weathersit != \"heavy rain/snow\", ]   head(bike) #>    season mnth day hr holiday weekday    workingday   weathersit temp  atemp #> 1: Winter  Jan   1  0       0       6 No Workingday        clear 0.24 0.2879 #> 2: Winter  Jan   1  1       0       6 No Workingday        clear 0.22 0.2727 #> 3: Winter  Jan   1  2       0       6 No Workingday        clear 0.22 0.2727 #> 4: Winter  Jan   1  3       0       6 No Workingday        clear 0.24 0.2879 #> 5: Winter  Jan   1  4       0       6 No Workingday        clear 0.24 0.2879 #> 6: Winter  Jan   1  5       0       6 No Workingday cloudy/misty 0.24 0.2576 #>     hum windspeed casual registered bikers #> 1: 0.81    0.0000      3         13     16 #> 2: 0.80    0.0000      8         32     40 #> 3: 0.80    0.0000      5         27     32 #> 4: 0.75    0.0000      3         10     13 #> 5: 0.75    0.0000      0          1      1 #> 6: 0.75    0.0896      0          1      1"},{"path":"http://plantedml.com/glex/articles/Bikesharing-Decomposition-rpf.html","id":"fitting-purification-component-extraction","dir":"Articles","previous_headings":"","what":"Fitting, Purification, Component Extraction","title":"Bikesharing: Decomposition with Random Planted Forest","text":"Next can fit Random Planted Forest bikers variable, using subset available predictors. limit model’s complexity setting max_interaction = 3, going visualize interactions third degree, using higher value might marginally improve predictive performance cost longer runtime. example , smaller model merely 30 trees suffices. also purify forest enable desired decomposition. step required global predictions may take time, implemented separate step. select predictors interest use glex() retrieve predictive components include , main effects 3rd degree interactions. resulting object also contains original data x, need later visualization. Please note fitting model, purification, extraction components may take time, depending available resources size data. example, steps took around 30 seconds complete GitHub Actions.","code":"rp <- rpf(   bikers ~ day + hr + temp + windspeed + workingday + hum + weathersit + season,   data = bike,   max_interaction = 3, ntrees = 30 )  purify(rp) #> -- Regression Random Planted Forest -- #>  #> Formula: bikers ~ day + hr + temp + windspeed + workingday + hum + weathersit +      season  #> Fit using 8 predictors and 3-degree interactions. #> Forest is purified! #>  #> Called with parameters: #>  #>             loss: L2 #>           ntrees: 30 #>  max_interaction: 3 #>           splits: 30 #>        split_try: 10 #>            t_try: 0.4 #>            delta: 0 #>          epsilon: 0.1 #>    deterministic: FALSE #>         parallel: FALSE #>           purify: FALSE #>               cv: FALSE vars <- c(\"hr\", \"temp\", \"workingday\", \"hum\", \"weathersit\", \"season\")  components <- glex(rp, bike, predictors = vars)  # There's a lot of components... str(components$m, list.len = 8) #> Classes 'data.table' and 'data.frame':   8644 obs. of  92 variables: #>  $ day                            : num  -33.9 -33.9 -33.9 -33.9 -33.9 ... #>  $ hr                             : num  -121 -121 -121 -122 -121 ... #>  $ temp                           : num  -37.5 -37.5 -37.5 -37.5 -37.5 ... #>  $ windspeed                      : num  0.0338 0.0338 0.0338 0.0338 0.0338 ... #>  $ workingday                     : num  -0.983 -0.983 -0.983 -0.983 -0.983 ... #>  $ hum                            : num  -11.01 -7.91 -7.91 -2.78 -2.78 ... #>  $ weathersit                     : num  4.21 4.21 4.21 4.21 4.21 ... #>  $ season                         : num  -24.7 -24.7 -24.7 -24.7 -24.7 ... #>   [list output truncated] #>  - attr(*, \".internal.selfref\")=<externalptr>"},{"path":"http://plantedml.com/glex/articles/Bikesharing-Decomposition-rpf.html","id":"main-effects","dir":"Articles","previous_headings":"","what":"Main Effects","title":"Bikesharing: Decomposition with Random Planted Forest","text":"","code":"p_main <- plot_main_effect(components, \"temp\") +   plot_main_effect(components, \"hr\") +   plot_main_effect(components, \"workingday\")  p_main + plot_layout(widths = c(.3, .3, .4))"},{"path":"http://plantedml.com/glex/articles/Bikesharing-Decomposition-rpf.html","id":"way-interactions","dir":"Articles","previous_headings":"","what":"2-Way Interactions","title":"Bikesharing: Decomposition with Random Planted Forest","text":"","code":"p_2way1 <- plot_twoway_effects(components, c(\"workingday\", \"temp\")) p_2way2 <- plot_twoway_effects(components, c(\"hr\", \"workingday\")) p_2way3 <- plot_twoway_effects(components, c(\"hr\", \"temp\"))  p_2way <- (p_2way1 / p_2way2 +      plot_layout(guides = \"collect\") &       theme(legend.position = \"bottom\")) | p_2way3  p_2way <- p_2way +    plot_annotation(tag_levels = list(c(\"1,2\", \"3,1\", \"3,3\")), tag_prefix = \"m(\", tag_suffix = \")\")  p_2way"},{"path":"http://plantedml.com/glex/articles/Bikesharing-Decomposition-rpf.html","id":"way-interaction","dir":"Articles","previous_headings":"","what":"3-Way Interaction","title":"Bikesharing: Decomposition with Random Planted Forest","text":"","code":"p_3way <- plot_threeway_effects(components, c(\"hr\", \"temp\", \"workingday\"))  p_3way"},{"path":"http://plantedml.com/glex/articles/Bikesharing-Decomposition-rpf.html","id":"everything-together","dir":"Articles","previous_headings":"","what":"Everything Together","title":"Bikesharing: Decomposition with Random Planted Forest","text":"","code":"p_main / p_2way / p_3way +    plot_layout(heights = c(.2, .5, .3))"},{"path":"http://plantedml.com/glex/articles/Bikesharing-Decomposition-rpf.html","id":"additional-effects","dir":"Articles","previous_headings":"","what":"Additional effects","title":"Bikesharing: Decomposition with Random Planted Forest","text":"main effects: Iterating vars (hr, temp, workingday, hum, weathersit, season), passing plot_main_effect, collecting plots patchwork::wrap_plots():  use autoplot convenience. Internally just passes arguments specialized plot_* functions, depending number predictors supplied.      3rd degree interactions can tricky, effect .","code":"wrap_plots(lapply(vars, plot_main_effect, components = components)) autoplot(components, c(\"season\", \"workingday\")) autoplot(components, c(\"season\", \"hr\")) autoplot(components, c(\"season\", \"weathersit\")) autoplot(components, c(\"weathersit\", \"temp\")) autoplot(components, c(\"hum\", \"temp\")) autoplot(components, c(\"season\", \"hr\", \"weathersit\")) autoplot(components, c(\"workingday\", \"hr\", \"season\")) # Hard to interpret, likely spurious autoplot(components, c(\"workingday\", \"hr\", \"weathersit\")) # zero effect autoplot(components, c(\"weathersit\", \"season\", \"workingday\"))"},{"path":"http://plantedml.com/glex/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marvin N. Wright. Author, maintainer. Joseph Theo Meyer. Author. Munir Hiabu. Author. Lukas Burk. Author.","code":""},{"path":"http://plantedml.com/glex/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wright MN, Meyer JT, Hiabu M, Burk L (2023). glex: Global Explanations Tree-Based Models. https://github.com/PlantedML/glex, http://plantedml.com/glex/.","code":"@Manual{,   title = {glex: Global Explanations for Tree-Based Models},   author = {Marvin N. Wright and Joseph Theo Meyer and Munir Hiabu and Lukas Burk},   year = {2023},   note = {https://github.com/PlantedML/glex, http://plantedml.com/glex/}, }"},{"path":"http://plantedml.com/glex/index.html","id":"global-explanations-for-tree-based-models","dir":"","previous_headings":"","what":"Global Explanations for Tree-Based Models","title":"Global Explanations for Tree-Based Models","text":"Global explanations tree-based models decomposing regression classification functions sum main components interaction components arbitrary order. Calculates SHAP values q-interaction SHAP values q tree-based models xgboost.","code":""},{"path":"http://plantedml.com/glex/reference/glex.html","id":null,"dir":"Reference","previous_headings":"","what":"Global explanations for tree-based models. — glex","title":"Global explanations for tree-based models. — glex","text":"Global explanations tree-based models decomposing regression classification functions sum main components interaction components arbitrary order. Calculates SHAP values q-interaction SHAP values q tree-based models xgboost.","code":""},{"path":"http://plantedml.com/glex/reference/glex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global explanations for tree-based models. — glex","text":"","code":"glex(object, x, ...)  # S3 method for rpf glex(object, x, max_interaction = NULL, ...)  # S3 method for xgb.Booster glex(object, x, max_interaction = NULL, ...)"},{"path":"http://plantedml.com/glex/reference/glex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global explanations for tree-based models. — glex","text":"object Model explained. x Data explained. ... arguments passed methods. max_interaction Maximum interaction size consider. Defaults using possible interactions.","code":""},{"path":"http://plantedml.com/glex/reference/glex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global explanations for tree-based models. — glex","text":"Decomposition regression classification function. list elements: shap: SHAP values (xgboost method ). m: Functional decomposition, .e., main interaction components model, degree specified max_interaction. intercept: Intercept, .e., expected value prediction.","code":""},{"path":"http://plantedml.com/glex/reference/glex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Global explanations for tree-based models. — glex","text":"parallel execution, register backend, e.g. doParallel::registerDoParallel().","code":""},{"path":"http://plantedml.com/glex/reference/glex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global explanations for tree-based models. — glex","text":"","code":"# Random Planted Forest ----- if (requireNamespace(\"randomPlantedForest\", quietly = TRUE)) { library(randomPlantedForest)  rp <- rpf(mpg ~ ., data = mtcars[1:26, ], max_interaction = 2)  glex_rpf <- glex(rp, mtcars[27:32, ]) str(glex_rpf, list.len = 5) } #> List of 3 #>  $ m        :Classes ‘data.table’ and 'data.frame':\t6 obs. of  55 variables: #>   ..$ cyl      : num [1:6] 0.656 0.656 -0.331 -0.121 -0.331 ... #>   ..$ disp     : num [1:6] 0.448 2.03 -0.856 0.448 -0.59 ... #>   ..$ hp       : num [1:6] 3.116 0.262 -2.368 -0.521 -2.368 ... #>   ..$ drat     : num [1:6] 1.775 -0.321 1.775 -0.222 -0.222 ... #>   ..$ wt       : num [1:6] 3.07 2.921 0.386 0.507 -1.101 ... #>   .. [list output truncated] #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ intercept: num 20.2 #>  $ x        :Classes ‘data.table’ and 'data.frame':\t6 obs. of  10 variables: #>   ..$ cyl : num [1:6] 4 4 8 6 8 4 #>   ..$ disp: num [1:6] 120.3 95.1 351 145 301 ... #>   ..$ hp  : num [1:6] 91 113 264 175 335 109 #>   ..$ drat: num [1:6] 4.43 3.77 4.22 3.62 3.54 4.11 #>   ..$ wt  : num [1:6] 2.14 1.51 3.17 2.77 3.57 ... #>   .. [list output truncated] #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"class\")= chr [1:5] \"glex\" \"rpf_components\" \"glex\" \"rpf_components\" ... # xgboost ----- if (requireNamespace(\"xgboost\", quietly = TRUE)) { library(xgboost) x <- as.matrix(mtcars[, -1]) y <- mtcars$mpg xg <- xgboost(data = x[1:26, ], label = y[1:26],               params = list(max_depth = 4, eta = .1),               nrounds = 10, verbose = 0) glex(xg, x[27:32, ])  if (FALSE) { # Parallel execution doParallel::registerDoParallel() glex(xg, x[27:32, ]) } }"},{"path":"http://plantedml.com/glex/reference/plot_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Prediction Components — autoplot.glex","title":"Plot Prediction Components — autoplot.glex","text":"Plot Prediction Components","code":""},{"path":"http://plantedml.com/glex/reference/plot_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Prediction Components — autoplot.glex","text":"","code":"# S3 method for glex autoplot(object, predictors, ...)  plot_main_effect(components, predictor, ...)  plot_threeway_effects(components, predictors, ...)  plot_twoway_effects(components, predictors, ...)"},{"path":"http://plantedml.com/glex/reference/plot_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Prediction Components — autoplot.glex","text":"... Unused components, object Predicted components including original data model fit , returned glex() predictor, predictors [character] vector predictor names, e.g. \"x1\" plot main effect x1, c(\"x1\", \"x2\") plot interaction term x1:x2.","code":""},{"path":"http://plantedml.com/glex/reference/plot_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Prediction Components — autoplot.glex","text":"ggplot2 object.","code":""},{"path":"http://plantedml.com/glex/reference/plot_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Prediction Components — autoplot.glex","text":"","code":"if (requireNamespace(\"randomPlantedForest\", quietly = TRUE)) { library(randomPlantedForest)  # introduce factor variables to show categorical feature handling mtcars$cyl <- factor(mtcars$cyl) mtcars$vs <- factor(mtcars$vs)  # Fit forest, get components set.seed(12) rpfit <- rpf(mpg ~ cyl + wt + hp + drat + vs, data = mtcars, ntrees = 25, max_interaction = 3) components <- glex(rpfit, mtcars)  # Main effects ---- plot_main_effect(components, \"wt\") plot_main_effect(components, \"cyl\") }  # plot_threeway_effects(components, c(\"hr\", \"temp\", \"workingday\")) if (requireNamespace(\"randomPlantedForest\", quietly = TRUE)) { library(randomPlantedForest)  # 2-degree interaction effects ---- # 2d continuous, scatterplot of arbitrary orientation plot_twoway_effects(components, c(\"wt\", \"drat\")) # flipped: plot_twoway_effects(components, c(\"drat\", \"wt\"))  # continuous + categorical (forces continuous on x axis, colors by categorical) plot_twoway_effects(components, c(\"wt\", \"cyl\")) # identical: plot_twoway_effects(components, c(\"cyl\", \"wt\"))  # 2d categorical, heatmap of arbitrary orientation plot_twoway_effects(components, c(\"vs\", \"cyl\")) plot_twoway_effects(components, c(\"cyl\", \"vs\")) }"},{"path":"http://plantedml.com/glex/news/index.html","id":"glex-030","dir":"Changelog","previous_headings":"","what":"glex 0.3.0","title":"glex 0.3.0","text":"Added plotting functions main, 2- 3-degree interaction terms Added ggplot2::autoplot S3 method glex objects. Added pkgdown site Added Bikesharing article","code":""},{"path":"http://plantedml.com/glex/news/index.html","id":"glex-020","dir":"Changelog","previous_headings":"","what":"glex 0.2.0","title":"glex 0.2.0","text":"Convert glex() S3 generic function methods xgboost randomPlantedForest models. Fix bug xgboost method lead wrongly computed shap values certain cases. Added NEWS.md file track changes package.","code":""}]
